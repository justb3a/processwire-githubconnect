<?php namespace ProcessWire;

/**
 * GithubConnect See README.md for usage instructions. ProcessWire 3.x
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * @author Tabea David <info@justonestep.de>
 * @version 0.0.4
 * @copyright Copyright (c) 2017 justonestep.de, <info@justonestep.de>
 * @see https://github.com/justonestep/processwire-githubconnect
 * @see http://www.processwire.com
 */

/**
 * Class GithubConnect
 */
class GithubConnect extends WireData implements Module, ConfigurableModule {

  const API_AUTHORIZE = 'https://github.com/login/oauth/authorize';
  const API_ACCESS_TOKEN = 'https://github.com/login/oauth/access_token';
  const API_REPOS = 'https://api.github.com/repos/';
  const API_ORGS = 'https://api.github.com/orgs/%s/repos';
  const API_FILES = 'https://api.github.com/repos/%s/git/trees/%s';
  const API_FILES_RECURSIVE = 'https://api.github.com/repos/%s/git/trees/%s?recursive=1';
  const API_FILE = 'https://api.github.com/repos/%s/contents/%s';

  protected $repository = '';

  /**
   * Retrieves module meta data
   * Implementation of the Module interface
   *
   * @return array
   * @see http://processwire.com/apigen/class-Module.html
   */
  public static function getModuleInfo() {
    return array(
      'title' => 'Github Connect',
      'summary' => 'ProcessWire module to connect a Github OAuth application. ',
      'version' => 004,
      'href' => 'https://github.com/justonestep/processwire-githubconnect',
      'singular' => true,
      'autoload' => true,
      'icon' => 'github'
    );
  }

  /**
   * Initialize the module - ready
   *
   * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
   * when ProcessWire's API is ready. As a result, this is a good place to attach hooks.
   *
   * @see http://processwire.com/apigen/class-Module.html
   */
  public function ready() {
    // @todo: add checkbox, if enabled
    $this->addHookBefore('InputfieldSelect::render', $this, 'getSelectableRepositories');
    $this->addHookBefore('ProcessPageEdit::processInput', $this, 'autofillFields');
  }

  /**
   * Call Api
   *
   * @param string $url
   * @return array
   */
  private function callApi($url) {
    $connection = new WireHttp;
    $connection->setHeader('User-Agent:', ucfirst($this->organization) . '-App');
    $connection->set('access_token', $this->accessToken);
    $data = $connection->getJSON($url, true);

    // handle error
    if ($connection->getHttpCode() !== 200) $this->handleError("Not found: `$url`");

    return $data;
  }

  /**
   * Handle error
   *
   * @param string $msg
   */
  private function handleError($msg) {
    if ($this->config->debug) throw new WireException($msg);
    $this->log->error($msg);
    $this->error($msg);
  }

  /**
   * Set Repository
   * also check if it`s a existing repository
   *
   * @param string $repository
   */
  public function setRepository($repository) {
    if ($this->getRepositoryInformations($repository)) {
      $this->repository = $repository;
    }
  }

  /**
   * Set Repository
   *
   * @param string $repository
   */
  public function getRepository($repo) {
    $repository = $repo ? $repo : $this->repository;
    if (!$repository) $this->handleError("Not found: You've to provide a repository.");
    return $repository;
  }

  /**
   * Endpoint Get Repository
   * @see: https://developer.github.com/v3/repos/#get
   *
   * @param string $repository name of repository, scheme: `:owner/:repo`
   * @return array
   */
  public function getRepositoryInformations($repository = '') {
    return $this->callApi(self::API_REPOS . $this->getRepository($repository));
  }

  /**
   * Endpoint Get the readme
   * @see: https://developer.github.com/v3/repos/contents/#get-the-readme
   *
   * @param string $repository name of repository, scheme: `:owner/:repo`
   * @return array
   */
  public function getReadme($repository = '') {
    return $this->callApi(self::API_REPOS . $this->getRepository($repository) . '/readme');
  }

  /**
   * Endpoint Get the content
   *
   * @param array $data
   * @return string
   */
  public function getContent($data) {
    if (!is_array($data) || !array_key_exists('content', $data)) $this->handleError('The data transferred is not valid `getContent()`.');
    return base64_decode($data['content']);
  }

  /**
   * Endpoint Get the readme content
   *
   * @param string $repository name of repository, scheme: `:owner/:repo`
   * @return string
   */
  public function getReadmeContent($repository = '') {
    $data = $this->getReadme($repository);
    return $this->getContent($data);
  }

  /**
   * Endpoint Get certain file
   * @see: https://developer.github.com/v3/repos/contents/#get-contents
   *
   * @param string $filename
   * @param string $repository name of repository, scheme: `:owner/:repo`
   * @return array
   */
  public function getFile($filename, $repository = '') {
    return $this->callApi(sprintf(self::API_FILE, $this->getRepository($repository), $filename));
  }

  /**
   * Endpoint Get content of certain file
   * @see: https://developer.github.com/v3/repos/contents/#get-contents
   *
   * @param string $filename
   * @param string $repository name of repository, scheme: `:owner/:repo`
   * @return string
   */
  public function getContentOfAFile($filename, $repository = '') {
    $data = $this->getFile($filename, $repository);
    return $this->getContent($data);
  }

  /**
   * Endpoint List repositories for the specified org
   * @see: https://developer.github.com/v3/repos/#list-organization-repositories
   *
   * @param string $org
   * @return array
   */
  public function listRepositoriesByOrg($org = '') {
    $organization = $org ? $org : $this->organization;
    return $this->callApi(sprintf(self::API_ORGS, $organization));
  }

  /**
   * Endpoint Get a Tree
   * @see: https://developer.github.com/v3/git/trees/#get-a-tree
   *
   * A sha, or "hash", is an individual change to a file.
   * Every time you save a file with git, it creates a unique ID (a.k.a. the "SHA" or "hash")
   * that allows you to keep record of what changes were made when and by who.
   * Instead of a sha you can also use the name of a branch.
   *
   * @param string $sha defaults to branch `master`
   * @param boolen $recursive defaults to `true`
   * @param string $repository name of repository, scheme: `:owner/:repo`
   * @return array
   */
  public function getTree($sha = 'master', $recursive = true, $repository = '') {
    $apiUrl = $recursive ? self::API_FILES_RECURSIVE : self::API_FILES;
    return $this->callApi(sprintf($apiUrl, $this->getRepository($repository), $sha));
  }

  /**
   * Autofill Fields
   *
   * @param HookEvent $event
   */
  public function autofillFields(HookEvent $event) {
    $form = $event->arguments(0);
    $repository = $this->input->post->{$this->fieldSelect};
    $filename = $this->input->post->{$this->fieldSubSelect};
    $sublist = $form->get($this->fieldSubSelect);

    if ($repository) {
      if ($this->fieldTeaser && !$sublist) {
        $repoData = $this->getRepositoryInformations($repository);
        $this->input->post->{$this->fieldTeaser} = $repoData['description'];
      }

      $this->input->post->{$this->fieldPlain} = $repository;
      if (!$sublist) $this->input->post->{$this->fieldBody} = $this->getReadmeContent($repository);
    } elseif ($sublist && $filename) {
      $repository = $form->get($this->fieldPlain)->value;
      $this->input->post->{$this->fieldBody} = $this->getContentOfAFile($filename, $repository);
    }
  }

  /**
   * Get Selectable Repositories by Organization
   *
   * @param HookEvent $event
   */
  public function getSelectableRepositories(HookEvent $event) {
    $field = $event->object;

    switch ($field->name) {
      case $this->fieldSelect:
        $this->addRepositoriesAsOptions($field);
        break;
      case $this->fieldSubSelect:
        $this->addFilesAsOptions($field);
        break;
    }
  }

  /**
   * Add repositories as selectable options
   *
   * @param InputfieldSelect $field
   */
  private function addRepositoriesAsOptions($field) {
    $page = $this->pages->get($this->input->get->id);
    $data = $this->listRepositoriesByOrg();

    if ($data) {
      foreach ($data as $repo) $field->addOption($repo['full_name'], $repo['name']);
      $page->of(false);
      $page->save($this->fieldSelect);
      $page->of(true);
    }
  }

  /**
   * Add files as selectable options
   *
   * @param InputfieldSelect $field
   */
  private function addFilesAsOptions($field) {
    $page = $this->pages->get($this->input->get->id);
    $form = $field->get('parent');
    $repository = $form->get($this->fieldPlain)->value;
    $this->setRepository($repository);

    if ($this->fieldSubSelect && $repository) {
      $data = $this->getTree();
      foreach ($data['tree'] as $f) {
        if ($f['path'] === 'LICENSE' || $f['type'] === 'tree') continue;
        $field->addOption($f['path'], $f['path']);
      }

      $page->of(false);
      $page->save($this->fieldSubSelect);
      $page->of(true);
    }
  }

  /**
   * 1. Redirect users to request GitHub access
   * @see: https://developer.github.com/v3/oauth/
   * If the user accepts your request, GitHub redirects back to your site
   * with a temporary code in a code parameter as well as the state you provided.
   */
  public function authorize() {
    // an unguessable random string
    // it is used to protect against cross-site request forgery attacks
    $state = uniqid();

    $request = array(
      'client_id' => $this->clientId,
      'redirect_uri' => $this->redirectUri,
      'state' => $state
    );

    $url = self::API_AUTHORIZE . '?' . http_build_query($request);

    // a code has been returnd successfully
    if ($this->page->template->name === 'admin' && $this->input->get->code) {
      $this->getAccessToken();
    }

    return sprintf('<a href="%s" title="%s">%s</a>', $url, 'authorize', 'Authorize!');
  }

  /*
   * 2. GitHub redirects back to your site
   * Request the access_token
   *
   * Now you need to exchange the code for an access token.
   * You simply have to POST this code,
   * along with some app identification parameters.
   */
  public function getAccessToken() {
    $connection = new WireHttp;
    $connection->setHeader('Accept', 'application/json');

    $request = array(
      'client_id' => $this->clientId,
      'client_secret' => $this->clientSecret,
      'code' => $this->input->get->code,
      'redirect_uri' => $this->redirectUri,
      'state' => $this->input->state
    );

    $data = $connection->post(self::API_ACCESS_TOKEN, $request);

    if ($data) {
      $result = json_decode($data, true);

      if (isset($result['access_token'])) {
        $data = $this->modules->getModuleConfigData($this->className());
        $data['accessToken'] = $result['access_token'];
        $this->modules->saveModuleConfigData($this->className(), $data);
      } else {
        $error = "[GithubConnect]: No access token could be received.";
        if (isset($result['error'])) $error .= " Reason: `{$result['error']}` – {$result['error_description']}";

        $this->log->save('errors', $error);
        $this->error($error);
      }

      $this->session->redirect($this->redirectUri);
    }
  }

}
